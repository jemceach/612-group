print(paste("Mean Diversity:=>", round(mean(cal_cosine, na.rm = T), 4)))
actualDiversity_Error = 1 - mean(cal_cosine, na.rm = T)
print(paste("Diversity Error:=> ", round(actualDiversity_Error, 4)))
}
# Return Mean Diversity Only
MeanDiversity <- function(ActualData, Predicted) {
cal_cosine <- NULL
Predicted = as(Predicted, "matrix")
ActualData = as(ActualData, "matrix")
for (i in 1:(dim(ActualData)[1])) {
a <- as.vector(ActualData[i, ])
b <- as.vector(Predicted[i, ])
a[which(is.na(a))] = 0
b[which(is.na(b))] = 0
cal_cosine[i] <- cosine(a, b)
}
return(mean(cal_cosine, na.rm = T))
}
getDiversity(ratings_test_unknown,svd_predict, "SVD k-10")
getDiversity(ratings_test_unknown,svdz_predict,"SVD with Z-score")
getDiversity(ratings_test_unknown,fsvd_predict,"Funk SVD")
getDiversity(ratings_test_unknown, p_ub, "User-Based")
getDiversity(ratings_test_unknown,p_ib,"Item-Based")
rbind(error,svd_results)  %>% round(4) %>% kable(caption = "Compare All Accuracy Measures") %>% kable_styling()
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d)
mean_div<-colnames(mean_div, Average)
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d)
mean_div<-colnames(mean_div, "Average")
str(mean_div)
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-as.table(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div<-colnames(mean_div, "Average")
mean_div %>% kable(caption="Compare all Mean Diversity Score") %>% kable_styling()
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-as.data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div<-colnames(mean_div, "Average")
#dependencies
## data processing packages
library(tidyr); library(dplyr); library(RCurl); library(jsonlite); library(plyr)
##formatting packages
library(knitr); library(kableExtra); library(default)
##visualization packages
library(ggplot2)
##recommender packages
library(recommenderlab); library(Metrics); library(lsa); library(diveRsity)
# global options
## knit sizing
options(max.print="100"); opts_knit$set(width=75)
## augment chunk output
opts_chunk$set(echo=T,cache=F, tidy=T,comment=F,message=T,warning=T) #change message/warning to F upon completion
## set table style for consistency
default(kable) <- list(format="html")
default(kable_styling)  <- list(bootstrap_options = "hover",full_width=T, font_size=10)
default(scroll_box) <- list(width = "100%")
## working directory
##try(setwd("~/Github/612-group/project-4"))
# cusine tags
data1<-read.csv("https://raw.githubusercontent.com/jemceach/612-group/master/project-4/data/chefmozcuisine.csv")
# restaurant name
data2<-read.csv("https://raw.githubusercontent.com/jemceach/612-group/master/project-4/data/geoplaces2.csv")
# user ratings
data3<-read.csv("https://raw.githubusercontent.com/jemceach/612-group/master/project-4/data/rating_final.csv")
# user profile
data4<-read.csv("https://raw.githubusercontent.com/jemceach/612-group/master/project-4/data/userprofile.csv")
# restaurant dataframe
## concatenate restaurant tags
cuisine <- aggregate(Rcuisine ~., data1, toString)
## merge & transform
restaurant <- data2 %>% select(placeID, name, city,price, alcohol,smoking_area) %>% mutate(name=tolower(gsub("[\u00ef\u00bf\u00bd\'_']", " ", name))) %>% mutate(city=tolower(city))
## set/revalue factors
restaurant$city <- revalue(restaurant$city, c("cd victoria"="ciudad victoria", "cd. victoria"="ciudad victoria","victoria "="ciudad victoria","victoria"="ciudad victoria","san luis potosi "="san luis potosi","san luis potos"="san luis potosi","s.l.p"="san luis potosi","slp"="san luis potosi","s.l.p."="san luis potosi"))
restaurant$smoking_area = revalue(restaurant$smoking_area, c("none"="no", "not permitted"="no", "section"="yes", "permitted"="yes", "only at bar"="yes"))
restaurant$price <- factor(restaurant$price, levels = c("low", "medium", "high"))
restaurant$alcohol = revalue(restaurant$alcohol, c("No_Alcohol_Served"="no", "Full_Bar"="yes", "Wine-Beer" ="yes"))
restaurant <- inner_join(restaurant, cuisine, by="placeID")
# user dataframe:
##select attributes of interest from profile
user_profile <- data4 %>% select(userID, budget,activity, smoker)
user <- inner_join(data3,user_profile,by='userID') %>% select(-service_rating, -food_rating)
## set/revalue factors
user$budget <- factor(user$budget, levels = c("low", "medium", "high"))
user$smoker <- revalue(user$smoker, c("false"="no", "true"="yes"))
user$smoker <- factor(user$smoker, levels = c("no", "yes"))
## change ratings from 0-2 scale to 1-3
user$rating[user$rating==2]<-3;user$rating[user$rating==1]<-2;user$rating[user$rating==0]<-1
# combine user / restaurant data & subset
data <- inner_join(user, restaurant, by="placeID")
data <- data %>% filter(city == "san luis potosi", activity=="student") %>% select(-city, -activity)
#view output
data %>% head() %>% kable(caption="User-Item Dataframe") %>% kable_styling()
data %>%  group_by(rating) %>% ggplot(aes(x=rating)) + geom_histogram(bins=3, color='#63707e', fill='#c8dad3') +labs(title="Raw Ratings Distribution")
data %>% filter(!is.na(budget)) %>% group_by(rating) %>% ggplot(aes(x=rating)) + geom_histogram(bins=3, color='#63707e', fill='#c8dad3') +labs(title="Ratings Distribution by Budget") + facet_wrap(~budget, nrow=1)
ggplot(data, aes(x=rating)) + geom_histogram(bins=3, color='#63707e', fill='#c8dad3') +labs(title="Ratings Distribution by Restaurant Pricing") + facet_wrap(data$price, nrow=1)
data %>% mutate(placeID = as.factor(placeID), rating=as.factor(rating)) %>% group_by(placeID) %>% add_tally() %>% ungroup() %>% ggplot(aes(x=reorder(placeID, -n),fill=rating))+ geom_bar(stat="count", color="#000000") + theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+labs(title="Restaurant Rating Counts") + scale_fill_manual(values=c("#c8dad3", "#93b5b3", "#63707e"))
data %>% select(Rcuisine, rating) %>% mutate(rating=as.factor(rating)) %>% group_by(Rcuisine) %>% add_tally() %>% ungroup %>% ggplot(aes(x=reorder(Rcuisine, -n), fill=rating)) + geom_bar(stat="count",color="#000000")+labs(title="Restaurant Cuisine Tag Counts with Ratings") + theme(axis.title.x=element_blank(), axis.text.x = element_text(angle = 30, hjust = 1, size = 8))+ scale_fill_manual(values=c("#c8dad3", "#93b5b3", "#63707e"))
# create user item matrix
ui_matrix <- data %>% select(userID, placeID, rating) %>% spread(placeID, rating)
rownames(ui_matrix)<-ui_matrix$userID # set row names to userid
ui_matrix<-ui_matrix %>% select(-userID) %>% as.matrix()# remove userid from columns
umat <- as(ui_matrix,"realRatingMatrix") # save real ratings for algo
# preview matrices
as.data.frame.array(ui_matrix) %>% head() %>% kable(caption="Preview of User-Item Matrix") %>% kable_styling() %>% scroll_box()
# evaluation method with 90% of data for train and 10% for test
set.seed(1000)
evalu <- evaluationScheme(umat, method="split", train=0.8, given=3, goodRating=1, k=10)
#User-based collaborative filtering recommender
ub_train <- getData(evalu, "train")
ub_c <- Recommender(ub_train, "UBCF",
param=list(normalize = "center",method="Cosine"))
#Item-based collaborative filtering recommender
ib_train<-getData(evalu, "train")
ib_c <- Recommender(ib_train, "IBCF",
param=list(normalize = "center",method="Cosine"))
#predicted ratings on the test data set for the UBCF and IBCF recommender
ub_known<-getData(evalu, "known")
ib_known<-getData(evalu, "known")
p_ub <- predict(ub_c, ub_known, type="ratings")
p_ib<- predict(ib_c, ib_known, type="ratings")
#setting ceiling/floor values to ensure all are inside rating scale
p_ub@data@x[p_ub@data@x[] < 1] <- 1
p_ub@data@x[p_ub@data@x[] > 3] <- 3
p_ib@data@x[p_ib@data@x[] < 1] <- 1
p_ib@data@x[p_ib@data@x[] > 3] <- 3
#compare the predictions for user-based and item-based
ub_unknown<-getData(evalu, "unknown")
ib_unknown<-getData(evalu, "unknown")
error <- rbind(
ub_c = calcPredictionAccuracy(p_ub, ub_unknown),
ib_c = calcPredictionAccuracy(p_ib, ib_unknown)
)
error %>% kable(caption="Prediction Comparisons") %>% kable_styling()
# Prep data
ratings_train <- getData(evalu, 'train')# Training Dataset
ratings_test_known <- getData(evalu, 'known') # Test data from evaluationScheme of type KNOWN
ratings_test_unknown <- getData(evalu, 'unknown') # Unknow datset used for RMSE / model evaluation
# NORMALIZED
## Train Model
svdn <- Recommender(data=ratings_train,method='SVD', param=list(k=10, normalize='center'))
svdz<- Recommender( data=ratings_train,method='SVD',param=list(k=10,normalize='Z-score'))
fsvd <- funkSVD(ratings_train, verbose = F) # k = 10, gamma = 0.015, lambda = 0.001,
##Test/Evaluation Model Predication
svd_predict <- predict(svdn,ratings_test_known,type='ratings')
svd_pred <- calcPredictionAccuracy(svd_predict,ratings_test_unknown)
svdz_predict <- predict(svdz,ratings_test_known,type='ratings')
svdz_pred <- calcPredictionAccuracy(svdz_predict,ratings_test_unknown)
fsvd_predict <- predict(fsvd, ratings_test_known, verbose = F)
fsvd_predict  <- as(fsvd_predict,"realRatingMatrix")
fsvd_pred = calcPredictionAccuracy(fsvd_predict,  ratings_test_unknown)
# bind prediction results
svd_results <- rbind(svdz_pred, svd_pred, fsvd_pred)
svd_results %>% kable(caption="SVD Prediction Results with 10 Latent Factors") %>% kable_styling()
# Function to calualte Diversity
getDiversity <- function(ActualData, Predicted, tag) {
print(paste("Cosine Similarity Diversity for:", tag, ">>>"))
print("==========================================================================")
cal_cosine <- NULL
Predicted = as(Predicted, "matrix")
ActualData = as(ActualData, "matrix")
for (i in 1:(dim(ActualData)[1])) {
a <- as.vector(ActualData[i, ])
b <- as.vector(Predicted[i, ])
# set All NA from MAIN Data = 0
a[which(is.na(a))] = 0
b[which(is.na(b))] = 0
cal_cosine[i] <- cosine(a, b)  #a %*% b / sqrt(a%*%a * b%*%b)
print(paste(i,": ", cal_cosine[i]))
}
print("==========================================================================")
print(paste("Mean Diversity:=>", round(mean(cal_cosine, na.rm = T), 4)))
actualDiversity_Error = 1 - mean(cal_cosine, na.rm = T)
print(paste("Diversity Error:=> ", round(actualDiversity_Error, 4)))
}
# Return Mean Diversity Only
MeanDiversity <- function(ActualData, Predicted) {
cal_cosine <- NULL
Predicted = as(Predicted, "matrix")
ActualData = as(ActualData, "matrix")
for (i in 1:(dim(ActualData)[1])) {
a <- as.vector(ActualData[i, ])
b <- as.vector(Predicted[i, ])
a[which(is.na(a))] = 0
b[which(is.na(b))] = 0
cal_cosine[i] <- cosine(a, b)
}
return(mean(cal_cosine, na.rm = T))
}
getDiversity(ratings_test_unknown,svd_predict, "SVD k-10")
getDiversity(ratings_test_unknown,svdz_predict,"SVD with Z-score")
getDiversity(ratings_test_unknown,fsvd_predict,"Funk SVD")
getDiversity(ratings_test_unknown, p_ub, "User-Based")
getDiversity(ratings_test_unknown,p_ib,"Item-Based")
rbind(error,svd_results)  %>% round(4) %>% kable(caption = "Compare All Accuracy Measures") %>% kable_styling()
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-as.data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div<-colnames(mean_div, "Average")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-as.data.frame(colnames="Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-as.data.frame()
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(colnames="Mean")
mean_div %>% rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d)
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame()
mean_div %>% rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d)
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(c(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(c(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div<-colnames(mean_div,"Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div<-colnames(1,"Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div<-colnames([1],"Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
mean_div<-colnames(mean_div[1],"Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
colnames(mean_div,"Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
colnames(mean_div[1],"Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
colnames(mean_div$rbind.svdn_d..svdz_d..fsvd_d..ubcf_d..ibcf_d.,"Mean")
svdn_d <- MeanDiversity(ratings_test_unknown,svd_predict)
svdz_d <- MeanDiversity(ratings_test_unknown,svdz_predict)
fsvd_d <- MeanDiversity(ratings_test_unknown,fsvd_predict)
ubcf_d <- MeanDiversity(ratings_test_unknown,p_ub)
ibcf_d <- MeanDiversity(ratings_test_unknown,p_ib)
mean_div <-data.frame(rbind(svdn_d,svdz_d,fsvd_d,ubcf_d,ibcf_d))
colnames(mean_div) <- "Mean"
mean_div %>% kable() %>% kable_styling()
install.packages("purrr")
library(purrr)
temp <- list.files(data, pattern="*.json", full.names=TRUE)
getwd()
setwd("~/GitHub/612-group/final-project")
library(purrr)
temp <- list.files(data, pattern="*.json", full.names=TRUE)
library(purrr)
path <- ~/data/
library(purrr)
path <- "~/data/"
temp <- list.files(path, pattern="*.json", full.names=TRUE)
temp
library(purrr)
yelp <- fromJSON("data/yelp_test_set_business.json")
library(jsonlite)
yelp <- fromJSON("data/yelp_test_set_business.json")
library(jsonlite)
yelp <- stream_in(file("data/yelp_test_set_business.json"))
library(jsonlite)
path = "~/data/"
file.names <- dir(path, pattern =".json")
library(jsonlite)
path = "~/data/"
file.names <- dir(path, pattern ="*.json")
library(jsonlite)
path = "data/"
file.names <- dir(path, pattern =".json")
library(jsonlite)
path = "data/"
file.names <- dir(path, pattern =".json")
for(i in 1:length(file.names)){
file[i] <- stream_in(file("data/yelp_test_set_business.json"))
}
library(jsonlite)
path = "data/"
file.names <- dir(path, pattern =".json")
for(i in 1:length(file.names)){
file[i] <- stream_in(file("file.names[i]"))
}
library(jsonlite)
path = "data/"
file.names <- dir(path, pattern =".json")
for(i in 1:length(file.names)){
stream_in(file("file.names[i]"))
}
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern =".json"))
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern =".json"))
for(i in 1:length(file.names)){
file[i] <- stream_in(file("data/yelp_test_set_business.json"))
}
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern =".json"))
for(i in 1:length(file.names)){
stream_in(file("data/yelp_test_set_business.json"))
}
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern =".json"))
for(i in 1:length(file.names)){
stream_in(file(file.names[i]))
}
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern =".json"))
for(i in 1:length(file.names)){
file[i] <- stream_in(file(file.names[i]))
}
file.names
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern ="business.json"))
for(i in 1:length(file.names)){
file[i] <- stream_in(file(file.names[i]))
}
yelp<-stream_in(file( "data/yelp_test_set_business.json"))
View(yelp)
View(yelp)
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern ="business.json"))
library(jsonlite)
path = "data/"
file.names <- paste0(path, dir(path, pattern ="business.json"))
file.names
library(jsonlite)
path = "data/"
out.file<-""
business_files <- paste0(path, dir(path, pattern ="business.json"))
for(i in 1:length(business_files)){
file <- stream_in(file(business_files[i]))
out.file <- rbind(out.file, file)
}
yelp<-stream_in(file( "business_files"))
yelp<-stream_in(file("business_files"))
library(jsonlite)
path = "data/"
files <- paste0(path, dir(path, pattern =".json"))
print(files)
library(jsonlite)
path = "data/"
business <- paste0(path, dir(path, pattern ="business.json"))
do.call(rbind,rjson::fromJSON(file=business))
library(jsonlite)
path = "data/"
business <- paste0(path, dir(path, pattern ="business.json"))
do.call(rbind,-stream_in(file(business))
library(jsonlite)
path = "data/"
business <- paste0(path, dir(path, pattern ="business.json"))
do.call(rbind,-stream_in(file(business)))
library(jsonlite)
path = "data/"
business <- paste0(path, dir(path, pattern ="business.json"))
do.call(rbind,stream_in(file(business)))
library(jsonlite)
path = "data/"
business <- paste0(path, dir(path, pattern ="business.json"))
rbind.pages(lapply(business,fromJSON))
library(jsonlite)
path = "data/"
business <- paste0(path, dir(path, pattern ="business.json"))
rbind_pages(lapply(business,fromJSON))
library(jsonlite)
path = "data/"
file <- paste0(path, dir(path, pattern =".json"))
print(file)
library(jsonlite)
business1<-stream_in(file("data/yelp_test_set_business.json"))
business2<-stream_in(file("data/yelp_training_set_business.json"))
user1<-stream_in(file("data/yelp_test_set_user.json"))
user2<-stream_in(file("data/yelp_training_set_user.json"))
checkin1<-stream_in(file("data/yelp_test_set_checkin.json"))
checkin2<-stream_in(file("data/yelp_training_set_checkin.json"))
review1<-stream_in(file("data/yelp_test_set_review.json"))
review2<-stream_in(file("data/yelp_training_set_review.json"))
business1
View(business1)
View(business1)
View(business2)
View(business2)
business1<-stream_in(file("data/yelp_test_set_business.json"))
business2<-stream_in(file("data/yelp_training_set_business.json"))
user1<-stream_in(file("data/yelp_test_set_user.json"))
user2<-stream_in(file("data/yelp_training_set_user.json"))
checkin1<-stream_in(file("data/yelp_test_set_checkin.json"))
checkin2<-stream_in(file("data/yelp_training_set_checkin.json"))
review1<-stream_in(file("data/yelp_test_set_review.json"))
review2<-stream_in(file("data/yelp_training_set_review.json"))
library(dplyr); library(tidyr)
library(jsonlite)
# Read JSON files from repository
business1<-stream_in(file("data/yelp_test_set_business.json"))
business2<-stream_in(file("data/yelp_training_set_business.json"))
user1<-stream_in(file("data/yelp_test_set_user.json"))
user2<-stream_in(file("data/yelp_training_set_user.json"))
checkin1<-stream_in(file("data/yelp_test_set_checkin.json"))
checkin2<-stream_in(file("data/yelp_training_set_checkin.json"))
review1<-stream_in(file("data/yelp_test_set_review.json"))
review2<-stream_in(file("data/yelp_training_set_review.json"))
dplyr::inner_join(business1,business2, by="business_id")
dplyr::inner_join(business1,business2)
colnames(business1)
colnames(business1, business2)
colnames(business1)
business2
colnames(business2)
business1[ , order(names(business1))]
colnames(business1)
# sort alphabetically
business1<- business1[ , order(names(business1))]
business2<-business2[ , order(names(business2))]
colnames(business1)
colnames(business2)
# sort alphabetically
business1<- business1[ , order(names(business1))]
business2<-business2[ , order(names(business2))]
colnames(business1)
business2 <- select(business2, -stars)
intersect(business1, business2)
rbind(business1, business2)
# sort alphabetically
business1<- business1[ , order(names(business1))]
business2<-business2[ , order(names(business2))]
# View col names for test set
colnames(business1)
business_df <- rbind(business1, business2)
